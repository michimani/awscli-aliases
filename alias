[toplevel]

whoami = sts get-caller-identity

# Get AWS Account ID

id = sts get-caller-identity \
  --query 'Account' \
  --output text

# Get ARN of user or role that executes the cli command

myarn = sts get-caller-identity \
  --query 'Arn' \
  --output text

# Create a S3 Bucket
# 1st parameter: <bucket name>
# 2nd parameter: <region>
#
# e.g.
# aws create-bucket mybucket ap-northeast-1

create-bucket =
  !f() {
    aws s3api create-bucket \
    --bucket "${1}" \
    --create-bucket-configuration "LocationConstraint=${2}" \
    --region "${2}"
  }; f

# List Lmabda Functions by runtime
# 1st parameter: <runtime>
#
# e.g.
# aws lambda-fn-runtime python3

lambda-fn-runtime =
  !f() {
    aws lambda list-functions \
    --query "Functions[?contains(to_string(Runtime),\`${1}\`)]"
  }; f

# Login to ECR
# 1st parameter: <region>
#
# e.g.
# aws ecr-login ap-northeast-1

ecr-login =
  !f() {
    aws ecr get-login-password \
      --region "${1}" \
      | docker login \
      --username AWS \
      --password-stdin $(aws id).dkr.ecr.${1}.amazonaws.com
  }; f

# Switch to other Role
# 1st parameter: <role_name>
#
# e.g.
# aws switch-role 'hoge-role'

switch-role =
  !f() {
    SWITCH_CMD=$( \
      aws sts assume-role \
      --role-arn $( \
        aws iam get-role \
        --role-name "${1}" \
        --query 'Role.Arn' \
        --output text) \
      --role-session-name "switch-to-${1}" \
      --query 'Credentials.join(``,[`export AWS_ACCESS_KEY_ID=\"`,AccessKeyId,`\" AWS_SECRET_ACCESS_KEY=\"`,SecretAccessKey,`\" AWS_SESSION_TOKEN=\"`,SessionToken,`\"`])' \
      --output text) \
    && eval ${SWITCH_CMD} \
    && aws sts get-caller-identity
  }; f
